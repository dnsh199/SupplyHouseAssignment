{"ast":null,"code":"var _jsxFileName = \"/Users/dinesh/Documents/assignment/supplyHouseFE/customer-service-hours/src/components/RegularHours.js\";\n// src/components/RegularHours.js\nimport React from \"react\";\nimport { regularHours } from \"../data\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RegularHours = () => {\n  // Process JSON data into the required display format\n  const groupedHours = [{\n    range: \"Monday – Thursday\",\n    openTime: regularHours.data.find(day => day.dayOfWeek === \"MONDAY\").openTime,\n    closeTime: regularHours.data.find(day => day.dayOfWeek === \"THURSDAY\").closeTime\n  }, {\n    range: \"Friday\",\n    openTime: regularHours.data.find(day => day.dayOfWeek === \"FRIDAY\").openTime,\n    closeTime: regularHours.data.find(day => day.dayOfWeek === \"FRIDAY\").closeTime\n  }, {\n    range: \"Saturday – Sunday\",\n    openTime: regularHours.data.find(day => day.dayOfWeek === \"SATURDAY\").openTime,\n    closeTime: regularHours.data.find(day => day.dayOfWeek === \"SUNDAY\").closeTime\n  }];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Customer Service Hours\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: groupedHours.map((hour, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [hour.range, \": \", formatTime(hour.openTime), \" ET \\u2013 \", formatTime(hour.closeTime), \" ET\"]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n\n// Helper function to format time (e.g., \"08:00:00\" -> \"8:00 AM\")\n_c = RegularHours;\nconst formatTime = time => {\n  const [hour, minute] = time.split(\":\");\n  const isPM = parseInt(hour, 10) >= 12;\n  const formattedHour = isPM ? parseInt(hour, 10) - 12 || 12 : parseInt(hour, 10);\n  const period = isPM ? \"PM\" : \"AM\";\n  return `${formattedHour}:${minute} ${period}`;\n};\nexport default RegularHours;\nvar _c;\n$RefreshReg$(_c, \"RegularHours\");","map":{"version":3,"names":["React","regularHours","jsxDEV","_jsxDEV","RegularHours","groupedHours","range","openTime","data","find","day","dayOfWeek","closeTime","children","fileName","_jsxFileName","lineNumber","columnNumber","map","hour","index","formatTime","_c","time","minute","split","isPM","parseInt","formattedHour","period","$RefreshReg$"],"sources":["/Users/dinesh/Documents/assignment/supplyHouseFE/customer-service-hours/src/components/RegularHours.js"],"sourcesContent":["// src/components/RegularHours.js\nimport React from \"react\";\nimport { regularHours } from \"../data\";\n\nconst RegularHours = () => {\n  // Process JSON data into the required display format\n  const groupedHours = [\n    {\n      range: \"Monday – Thursday\",\n      openTime: regularHours.data.find((day) => day.dayOfWeek === \"MONDAY\").openTime,\n      closeTime: regularHours.data.find((day) => day.dayOfWeek === \"THURSDAY\").closeTime,\n    },\n    {\n      range: \"Friday\",\n      openTime: regularHours.data.find((day) => day.dayOfWeek === \"FRIDAY\").openTime,\n      closeTime: regularHours.data.find((day) => day.dayOfWeek === \"FRIDAY\").closeTime,\n    },\n    {\n      range: \"Saturday – Sunday\",\n      openTime: regularHours.data.find((day) => day.dayOfWeek === \"SATURDAY\").openTime,\n      closeTime: regularHours.data.find((day) => day.dayOfWeek === \"SUNDAY\").closeTime,\n    },\n  ];\n\n  return (\n    <div>\n      <h3>Customer Service Hours</h3>\n      <ul>\n        {groupedHours.map((hour, index) => (\n          <li key={index}>\n            {hour.range}: {formatTime(hour.openTime)} ET – {formatTime(hour.closeTime)} ET\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\n// Helper function to format time (e.g., \"08:00:00\" -> \"8:00 AM\")\nconst formatTime = (time) => {\n  const [hour, minute] = time.split(\":\");\n  const isPM = parseInt(hour, 10) >= 12;\n  const formattedHour = isPM ? parseInt(hour, 10) - 12 || 12 : parseInt(hour, 10);\n  const period = isPM ? \"PM\" : \"AM\";\n  return `${formattedHour}:${minute} ${period}`;\n};\n\nexport default RegularHours;\n"],"mappings":";AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,YAAY,QAAQ,SAAS;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,MAAMC,YAAY,GAAGA,CAAA,KAAM;EACzB;EACA,MAAMC,YAAY,GAAG,CACnB;IACEC,KAAK,EAAE,mBAAmB;IAC1BC,QAAQ,EAAEN,YAAY,CAACO,IAAI,CAACC,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,SAAS,KAAK,QAAQ,CAAC,CAACJ,QAAQ;IAC9EK,SAAS,EAAEX,YAAY,CAACO,IAAI,CAACC,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,SAAS,KAAK,UAAU,CAAC,CAACC;EAC3E,CAAC,EACD;IACEN,KAAK,EAAE,QAAQ;IACfC,QAAQ,EAAEN,YAAY,CAACO,IAAI,CAACC,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,SAAS,KAAK,QAAQ,CAAC,CAACJ,QAAQ;IAC9EK,SAAS,EAAEX,YAAY,CAACO,IAAI,CAACC,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,SAAS,KAAK,QAAQ,CAAC,CAACC;EACzE,CAAC,EACD;IACEN,KAAK,EAAE,mBAAmB;IAC1BC,QAAQ,EAAEN,YAAY,CAACO,IAAI,CAACC,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,SAAS,KAAK,UAAU,CAAC,CAACJ,QAAQ;IAChFK,SAAS,EAAEX,YAAY,CAACO,IAAI,CAACC,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,SAAS,KAAK,QAAQ,CAAC,CAACC;EACzE,CAAC,CACF;EAED,oBACET,OAAA;IAAAU,QAAA,gBACEV,OAAA;MAAAU,QAAA,EAAI;IAAsB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC/Bd,OAAA;MAAAU,QAAA,EACGR,YAAY,CAACa,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBAC5BjB,OAAA;QAAAU,QAAA,GACGM,IAAI,CAACb,KAAK,EAAC,IAAE,EAACe,UAAU,CAACF,IAAI,CAACZ,QAAQ,CAAC,EAAC,aAAM,EAACc,UAAU,CAACF,IAAI,CAACP,SAAS,CAAC,EAAC,KAC7E;MAAA,GAFSQ,KAAK;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEV,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV,CAAC;;AAED;AAAAK,EAAA,GAlCMlB,YAAY;AAmClB,MAAMiB,UAAU,GAAIE,IAAI,IAAK;EAC3B,MAAM,CAACJ,IAAI,EAAEK,MAAM,CAAC,GAAGD,IAAI,CAACE,KAAK,CAAC,GAAG,CAAC;EACtC,MAAMC,IAAI,GAAGC,QAAQ,CAACR,IAAI,EAAE,EAAE,CAAC,IAAI,EAAE;EACrC,MAAMS,aAAa,GAAGF,IAAI,GAAGC,QAAQ,CAACR,IAAI,EAAE,EAAE,CAAC,GAAG,EAAE,IAAI,EAAE,GAAGQ,QAAQ,CAACR,IAAI,EAAE,EAAE,CAAC;EAC/E,MAAMU,MAAM,GAAGH,IAAI,GAAG,IAAI,GAAG,IAAI;EACjC,OAAO,GAAGE,aAAa,IAAIJ,MAAM,IAAIK,MAAM,EAAE;AAC/C,CAAC;AAED,eAAezB,YAAY;AAAC,IAAAkB,EAAA;AAAAQ,YAAA,CAAAR,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}